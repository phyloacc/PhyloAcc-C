// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Sample_n
Rcpp::List Sample_n(const int n_iter, /* N.B. everything passed in is assumed 0 index */     const int L, const int R, arma::Mat<int> edge, arma::vec distance, arma::Mat<int> X, arma::vec Y, arma::mat transition_matrix, arma::Row<double> pi_distro, double prior_r2_a, double prior_r2_b, double prior_r3_a, double prior_r3_b, double prior_zr_1, double prior_gc_a, double prior_gc_b, double prior_lc_a, double prior_lc_b, double prior_ac_a, double prior_ac_b, double prior_root_u, double prior_root_sd, /* 17-12-2022 PG now have uniform prior on variance so these are only use to set initial value */     double prior_lv_u, double prior_lv_sd, double prior_lb2_u, double prior_lb2_sd, double prior_lb3_u, double prior_lb3_sd, bool do_Y, bool uniform_prior_lv, const int inner_iter, bool verbose);
RcppExport SEXP _pac3_Sample_n(SEXP n_iterSEXP, SEXP LSEXP, SEXP RSEXP, SEXP edgeSEXP, SEXP distanceSEXP, SEXP XSEXP, SEXP YSEXP, SEXP transition_matrixSEXP, SEXP pi_distroSEXP, SEXP prior_r2_aSEXP, SEXP prior_r2_bSEXP, SEXP prior_r3_aSEXP, SEXP prior_r3_bSEXP, SEXP prior_zr_1SEXP, SEXP prior_gc_aSEXP, SEXP prior_gc_bSEXP, SEXP prior_lc_aSEXP, SEXP prior_lc_bSEXP, SEXP prior_ac_aSEXP, SEXP prior_ac_bSEXP, SEXP prior_root_uSEXP, SEXP prior_root_sdSEXP, SEXP prior_lv_uSEXP, SEXP prior_lv_sdSEXP, SEXP prior_lb2_uSEXP, SEXP prior_lb2_sdSEXP, SEXP prior_lb3_uSEXP, SEXP prior_lb3_sdSEXP, SEXP do_YSEXP, SEXP uniform_prior_lvSEXP, SEXP inner_iterSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n_iter(n_iterSEXP);
    Rcpp::traits::input_parameter< /* N.B. everything passed in is assumed 0 index */     const int >::type L(LSEXP);
    Rcpp::traits::input_parameter< const int >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int> >::type edge(edgeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type distance(distanceSEXP);
    Rcpp::traits::input_parameter< arma::Mat<int> >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type transition_matrix(transition_matrixSEXP);
    Rcpp::traits::input_parameter< arma::Row<double> >::type pi_distro(pi_distroSEXP);
    Rcpp::traits::input_parameter< double >::type prior_r2_a(prior_r2_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_r2_b(prior_r2_bSEXP);
    Rcpp::traits::input_parameter< double >::type prior_r3_a(prior_r3_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_r3_b(prior_r3_bSEXP);
    Rcpp::traits::input_parameter< double >::type prior_zr_1(prior_zr_1SEXP);
    Rcpp::traits::input_parameter< double >::type prior_gc_a(prior_gc_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_gc_b(prior_gc_bSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lc_a(prior_lc_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lc_b(prior_lc_bSEXP);
    Rcpp::traits::input_parameter< double >::type prior_ac_a(prior_ac_aSEXP);
    Rcpp::traits::input_parameter< double >::type prior_ac_b(prior_ac_bSEXP);
    Rcpp::traits::input_parameter< double >::type prior_root_u(prior_root_uSEXP);
    Rcpp::traits::input_parameter< double >::type prior_root_sd(prior_root_sdSEXP);
    Rcpp::traits::input_parameter< /* 17-12-2022 PG now have uniform prior on variance so these are only use to set initial value */     double >::type prior_lv_u(prior_lv_uSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lv_sd(prior_lv_sdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lb2_u(prior_lb2_uSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lb2_sd(prior_lb2_sdSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lb3_u(prior_lb3_uSEXP);
    Rcpp::traits::input_parameter< double >::type prior_lb3_sd(prior_lb3_sdSEXP);
    Rcpp::traits::input_parameter< bool >::type do_Y(do_YSEXP);
    Rcpp::traits::input_parameter< bool >::type uniform_prior_lv(uniform_prior_lvSEXP);
    Rcpp::traits::input_parameter< const int >::type inner_iter(inner_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(Sample_n(n_iter, L, R, edge, distance, X, Y, transition_matrix, pi_distro, prior_r2_a, prior_r2_b, prior_r3_a, prior_r3_b, prior_zr_1, prior_gc_a, prior_gc_b, prior_lc_a, prior_lc_b, prior_ac_a, prior_ac_b, prior_root_u, prior_root_sd, prior_lv_u, prior_lv_sd, prior_lb2_u, prior_lb2_sd, prior_lb3_u, prior_lb3_sd, do_Y, uniform_prior_lv, inner_iter, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pac3_Sample_n", (DL_FUNC) &_pac3_Sample_n, 32},
    {NULL, NULL, 0}
};

RcppExport void R_init_pac3(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
